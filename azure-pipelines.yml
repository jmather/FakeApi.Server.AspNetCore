# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
- master

stages:
- stage: BuildAndDeploy
  displayName: Build and Deploy (this isn't right but maybe it'll work at least...)
  jobs:
  - job: Quality
    displayName: Get Test Coverage and Code Quality
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      buildConfiguration: 'Release'
    steps:
    # Install the latest version of the dotnet sdk
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk 2.2.103'
      inputs:
        version: 2.2.103

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Azure'
        organization: 'jmather-github'
        scannerMode: 'CLI'
        configMode: manual
        projectKey: 'jmather_FakeApi.Server.AspNetCore'
        projectName: '.Net Core Fake API Server'
        projectVersion: '0.1.0'

    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - script: dotnet tool install --global coverlet.console
      displayName: 'Install coverlet'

    - script: dotnet test --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --logger trx --no-build
      displayName: 'dotnet test --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --logger trx --no-build'

    - script: dotnet tool install -g dotnet-reportgenerator-globaltool
      displayName: 'install reportgenerator'

    - script: reportgenerator -reports:test/**/coverage.cobertura.xml -targetdir:CodeCoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
      displayName: 'reportgenerator -reports:test/**/coverage.cobertura.xml -targetdir:CodeCoverageReport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"'

    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: 'test/**/*.trx'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverageReport/Cobertura.xml'
  #      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverageReport'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

  - job: BuildTestDeploy
    displayName: Build for Deployment, Test, and Optionally Deploy (set deployTo = [Test, Production])
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      buildConfiguration: 'Release'
      deployTo: None
    steps:
    # Install the latest version of the dotnet sdk
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk 2.2.103'
      inputs:
        version: 2.2.103

    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - script: dotnet test --configuration $(buildConfiguration)--no-build
      displayName: 'dotnet test --configuration $(buildConfiguration) --no-build'

    - task: DotNetCoreCLI@2
      displayName: Package Artifact
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
        publishWebProjects: true
        feedsToUse: 'select'
        versioningScheme: 'off'

    # - task: PublishBuildArtifacts@1
    #   displayName: Publish Artifact
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     ArtifactName: 'FakeApiServer'
    #     publishLocation: 'Container'

    - task: AzureRmWebAppDeployment@4
      displayName: Deploy to https://fake-api-test.azurewebsites.com
      condition: and(succeeded(), not(eq(variables['DeployTo'], 'Test')))
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Pay as you go(38adecfa-8752-4938-8e3a-e109b3ef07e0)'
        appType: 'webApp'
        WebAppName: 'fake-api-test'
        packageForLinux: '$(Build.ArtifactStagingDirectory)/*.zip'

    - task: AzureRmWebAppDeployment@4
      displayName: Deploy to https://fake-api.azurewebsites.com
      condition: and(succeeded(), not(eq(variables['DeployTo'], 'Production')))
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Pay as you go(38adecfa-8752-4938-8e3a-e109b3ef07e0)'
        appType: 'webApp'
        WebAppName: 'fake-api-test'
        packageForLinux: '$(Build.ArtifactStagingDirectory)/*.zip'

