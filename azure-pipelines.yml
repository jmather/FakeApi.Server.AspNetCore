# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
  - master

variables:
  buildConfiguration: 'Release'

stages:
  - stage: BuildAndDeploy
    displayName: Test
    jobs:
      - job: Quality
        displayName: Get Test Coverage and Code Quality
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Install the latest version of the dotnet sdk
          - task: DotNetCoreInstaller@0
            displayName: 'Use .NET Core sdk 2.2.103'
            inputs:
              version: 2.2.103

          - script: dotnet tool install --global coverlet.console
            displayName: 'Install coverlet'

          - script: dotnet tool install -g dotnet-reportgenerator-globaltool
            displayName: 'install reportgenerator'

          - task: SonarCloudPrepare@1
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            inputs:
              SonarCloud: 'Azure'
              organization: 'jmather-github'
              scannerMode: MSBuild
              configMode: file
              configFile: sonar-project.properties
              projectKey: jmather_FakeApi.Server.AspNetCore
              projectName: .Net Core Fake API Server
              projectVersion: '$(Build.BuildNumber)'
              cliProjectVersion: '$(Build.BuildNumber)'
              extraProperties: |
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/test/*/coverage.opencover.xml,$(Build.SourcesDirectory)/test/FakeApi.Server.AspNetCore.Test/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Build.SourcesDirectory)/test/*/TestResults/*.trx
                sonar.links.homepage=https://github.com/jmather/FakeApi.Server.AspNetCore
                sonar.links.ci=https://dev.azure.com/jmather0115/FakeAPI.Server.AspNetCore/_build?definitionId=1&_a=summary
                sonar.links.scm=https://github.com/jmather/FakeApi.Server.AspNetCore
                sonar.links.issue=https://github.com/jmather/FakeApi.Server.AspNetCore/issues

          - task: SonarCloudPrepare@1
            condition: and(succeeded(), not(eq(variables['Build.SourceBranch'], 'refs/heads/master')))
            inputs:
              SonarCloud: 'Azure'
              organization: 'jmather-github'
              scannerMode: MSBuild
              configMode: file
              configFile: sonar-project.properties
              projectKey: jmather_FakeApi.Server.AspNetCore
              projectName: .Net Core Fake API Server
              projectVersion: '$(Build.BuildNumber)'
              cliProjectVersion: '$(Build.BuildNumber)'
              extraProperties: |
                sonar.branch.name="$(Build.SourceBranchName)"
                sonar.cs.opencover.reportsPaths=test/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=test/**/TestResults/*.trx
                sonar.links.homepage=https://github.com/jmather/FakeApi.Server.AspNetCore
                sonar.links.ci=https://dev.azure.com/jmather0115/FakeAPI.Server.AspNetCore/_build?definitionId=1&_a=summary
                sonar.links.scm=https://github.com/jmather/FakeApi.Server.AspNetCore
                sonar.links.issue=https://github.com/jmather/FakeApi.Server.AspNetCore/issues

          - script: dotnet build --configuration $(buildConfiguration)
            displayName: 'dotnet build $(buildConfiguration)'

          - script: dotnet test --configuration $(buildConfiguration) /p:Exclude="[xunit*]*" /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover,cobertura\" --logger trx --no-build
            displayName: 'dotnet test --configuration $(buildConfiguration) /p:Exclude="[xunit*]*" /p:CollectCoverage=true /p:CoverletOutputFormat="opencover,cobertura" --logger trx --no-build'

          - script: reportgenerator -reports:test/**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
            displayName: 'reportgenerator -reports:test/**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:"HtmlInline_AzurePipelines;Cobertura"'

          - task: PublishTestResults@2
            inputs:
              testRunner: VSTest
              testResultsFiles: 'test/**/*.trx'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)/coveragereport/Cobertura.xml'
          #      reportDirectory: '$(Build.SourcesDirectory)/coveragereport'

          - task: SonarCloudAnalyze@1
            displayName: 'Run Code Analysis'
            # This will fail on PR builds https://go.microsoft.com/fwlink/?linkid=862029
            continueOnError: true

          - task: DotNetCoreCLI@2
            displayName: Package Artifact
            inputs:
              command: 'publish'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
              publishWebProjects: true
              feedsToUse: 'select'
              versioningScheme: 'off'

          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: 'FakeApiServer'
              targetPath: '$(Build.ArtifactStagingDirectory)/*.zip'

  - stage: DeployTest
    dependsOn: BuildAndDeploy
    condition: and(succeeded(), not(eq(variables['Build.SourceBranch'], 'refs/heads/master')))
    displayName: Deploy To Test
    jobs:
    - deployment: DeployToTest
      environment: Testing
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'FakeApiServer'
                downloadPath: '$(System.ArtifactsDirectory)'

            - task: AzureRmWebAppDeployment@4
              displayName: Deploy to https://fake-api-test.azurewebsites.com
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Fake API Personal Azure Subscription'
                appType: 'webApp'
                WebAppName: 'fake-api-test'
                Package: $(System.ArtifactsDirectory)/**/*.zip
                enableCustomDeployment: true
                DeploymentType: 'zipDeploy'

  - stage: DeployProd
    dependsOn: BuildAndDeploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Deploy To Prod
    jobs:
    - deployment: DeployToProd
      environment: Production
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'FakeApiServer'
                downloadPath: '$(System.ArtifactsDirectory)'

            - task: AzureRmWebAppDeployment@4
              displayName: Deploy to https://fake-api.azurewebsites.com
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'Fake API Personal Azure Subscription'
                appType: 'webApp'
                WebAppName: 'fake-api'
                Package: $(System.ArtifactsDirectory)/**/*.zip
                enableCustomDeployment: true
                DeploymentType: 'zipDeploy'

  # - stage: DeployProd
  #   dependsOn: BuildAndDeploy
  #   condition: and(succeeded(), eq(variables['DeployTo'], 'Production'))
  #   displayName: DeployProd
  #   jobs:
  #   - job: DeployToProd
  #     pool:
  #       vmImage: 'ubuntu-latest'
  #     variables:
  #       deployTo: None
  #     steps:
  #     - task: DownloadBuildArtifacts@0
  #       inputs:
  #         buildType: 'current'
  #         downloadType: 'single'
  #         artifactName: 'FakeApiServer'
  #         downloadPath: '$(System.ArtifactsDirectory)'

  #     - task: AzureRmWebAppDeployment@4
  #       displayName: Deploy to https://fake-api.azurewebsites.com
  #       inputs:
  #         ConnectionType: 'AzureRM'
  #         azureSubscription: 'Fake API Personal Azure Subscription'
  #         appType: 'webApp'
  #         WebAppName: 'fake-api'
  #         Package: $(System.ArtifactsDirectory)/**/*.zip
  #         enableCustomDeployment: true
  #         DeploymentType: 'zipDeploy'

